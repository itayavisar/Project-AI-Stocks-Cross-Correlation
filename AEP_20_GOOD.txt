import tensorflow as tf
import stocksDatabase as DB
import stock as stk
import numpy as np
np.random.seed(1000) # for reproducibility
from keras.layers import Dense
#from keras.layers.normalization import BatchNormalization
from keras.models import Sequential
import keras as krs
import pandas as pd
import time

#cur_symbol = DB.csv_path+'\\QCOM.csv'
#cur_symbol = DB.csv_path+'\\AAPL_10lag.csv'
#cur_symbol = DB.csv_path+'\\AEE.csv'
cur_symbol = DB.csv_path+'\\AEP.csv'
#cur_symbol = DB.csv_path+'\\AVGO.csv'
#cur_symbol = DB.csv_path + '\\^GSPC.csv'
#cur_symbol = DB.csv_path + '\\BBY.csv'
#cur_symbol = DB.csv_path + '\\AAL.csv'
#cur_symbol = DB.csv_path + '\\MLNX.csv'
base = 20
def main():
    choise=5
    while(choise == '9'):
        print("choose:\n1:  experiment#1\n2:  experiment#2\n3:  experiment#3\n","4:  predictor\n9:  exit\n")
        choise = input()
        if choise == '1':
            choise=5
        elif choise == '4':
            choise = 5
        elif choise == '9':
            return
        else:
            break

    ### init parameters ###
    errVec = []
    length = 400
    correlation_length=400

    #sts paramerter
    prev_out = 0
    total_err = 0
    count_total=0
    count_swap = 0
    precentage_err = 0
    build_csv_table = {}
    build_csv_table[cur_symbol] = {}
    cur_stk = stk.Stock()

    timelineDate = []
    timeline = []
    corrValVec=[]
    for i in range(base,2,-1):
        #init stock
        print("initialize stock...")
        cur_stk.init_from_symbol(cur_symbol,base=i)
        test_stock = stk.Stock()
        test_stock.init_from_symbol(cur_symbol, base=i-1)
        test_stock_tags = test_stock.get_tags_history('Close')
        cur_y_tags = cur_stk.get_tags_history('Close',length=length)  #tags from index = 1

        # train set
        print("getting train set...")
        Y_tr = cur_y_tags[0:length]

        featuresMode = 'BEST_AGENT'
        #featuresMode = 0
        binary_correlation = False
        #agentMode = 'MuLag'
        agentMode = 0
        X_tr, symbol_corr, bestCorrVal, bestAgentLag = cur_stk.getFeatures(length,
                                                               correlation_length=correlation_length,
                                                                featuresMode = featuresMode,
                                                                binary_correlation = binary_correlation,
                                                                agentMode= agentMode)
        print("X_tr[0] is ",X_tr[0])

        # test set
        print("getting test set...")
        #X_te ,correlate_symbol, lag, corr_val = DB.getFeatures(cur_stk, cur_symbol, i-1, 1,correlation_length)
        X_te, correlate_symbol, bestCorrVal,bestAgentLag = test_stock.getFeatures(1, correlation_length=correlation_length,
                                                                       featuresMode = featuresMode,
                                                                       binary_correlation=binary_correlation,
                                                                                  agentMode=agentMode)
        #Y_te = y_tags[i-2]  # y_tags[i-2] is the tag of stock.Close[i-1]
        Y_te = test_stock_tags[0]

        corrValVec.append(bestCorrVal)
        timelineDate.append(cur_stk.Date[0])
        timeline.append(i)

        print("for cur_stk.symbol = ", cur_stk.name)
        print("for test_stk.symbol = ", test_stock.name)
        print("for test_stk.Date[i] = ", cur_stk.Date[0], " and i is ",i)
        print("lag,bestCorrVal,corr_symbol = ", bestAgentLag, bestCorrVal,correlate_symbol)
        print("on iteration:========================",i)

        ### create keras model
        print("creates the network...")
        model = Sequential()
        model.add(Dense((X_tr.shape[1]), input_dim=X_tr.shape[1], activation='relu'))
        model.add(Dense(5, activation='relu', kernel_initializer='random_uniform', bias_initializer='zeros'))
        #model.add(Dense(5, activation='relu', kernel_initializer='random_uniform', bias_initializer='zeros'))
        model.add(Dense(1, activation='sigmoid', kernel_initializer='random_uniform', bias_initializer='zeros'))

        # Compile model
        # model.compile(loss='binary_crossentropy', optimizer=krs.optimizers.SGD(lr=0.01, momentum=0.9, nesterov=True), metrics=['accuracy'])
        model.compile(loss='binary_crossentropy', optimizer=krs.optimizers.SGD(lr=0.01, momentum=0.9, nesterov=True),
                      metrics=['binary_accuracy'])

        #keras fit model
        print("fitting the network...")
        print("prev precentage_err===========>", precentage_err, "for i=", i)
        print("count total= ", count_total, "total_err=", total_err," count_swap= ",count_swap)
        model.fit(X_tr, Y_tr, epochs=150, batch_size=10,verbose=0,shuffle=False)

        # evaluate the model
        scores = model.evaluate(X_tr, Y_tr)
        print("scores for the train = ", scores)

        ##  keras prediction
        print("predict...")
        predictions = model.predict(X_te)

        # round predictions
        out = [round(x[0]) for x in predictions]
        out=out[0]
        print("\n==> out=", out, " Y_te=", Y_te, " X_te[0]=", X_te[0]," predictions is ", predictions)
        if out != Y_te:
            cur_err = 1
        else:
            cur_err = 0
        errVec.append(cur_err)
        total_err = total_err+cur_err

        build_csv_table[cur_symbol][cur_stk.Date[i]] = {'Correlated Symbol':correlate_symbol.split("\\")[1],
                                       'Correlated Value': bestCorrVal,'Lag': bestAgentLag,'Y_lag': X_te[0][0],
                                                        'Y_test': Y_te,'Prediction':out,'Err': cur_err}

        print("total_err:",total_err)
        count_total+=1
        precentage_err = total_err / count_total
        print("curr precentage_err==================>",precentage_err,"for i=",i)
        print("count total= ", count_total, "total_err=", total_err)
        if prev_out != out:
            print("=======================================================")
            print("new out is=:",out,"and prev_out is =: ",prev_out)
            print("=======================================================")
            prev_out = out
            count_swap+=1


    print("=========================================")
    print("=========================================")
    print("|||   precentage_err = ", precentage_err, "|||")
    print("|||   count of swaps = ", count_swap    , "|||")
    print("=========================================")
    print("=========================================")
    print("total predictions = ",count_total)

    import matplotlib.pyplot as plt
    print("corrValVec = ",corrValVec," errVec = ",errVec)
    u, inv = np.unique(timelineDate, return_inverse=True)
    fig = plt.figure()
    ax1 = fig.add_subplot(111)
    ax1.scatter(inv,corrValVec, c=errVec,)
    ax1.set_xticks(range(len(u)))
    ax1.set_xticklabels(u)
    fig.autofmt_xdate()
    #plt.scatter(timelineDate, corrValVec, c=errVec, label = ['False','True'])
    plt.xlabel("time")
    plt.ylabel("CC")
    plt.title("Classification over CC")
    plt.show()
    # build the results table

    (pd.DataFrame.from_dict(data=build_csv_table[cur_symbol], orient='index').to_csv('results.csv', header=True))
    #(pd.DataFrame.from_dict(data=build_csv_table, orient='index').to_csv('results.csv', header=True))

if __name__ == '__main__':
    from sys import argv
    #assert len(argv) == 3
    main()

